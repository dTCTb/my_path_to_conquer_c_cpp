#include "../termcolor.h"
#include <functional>
#include <iostream>
#include <stack>
#include <string>

using namespace std;

class Solution {
  public:
    static int minAddToMakeValid(string s) noexcept {
        stack<char> sk;
        int count{};
        for (size_t i{}; i < s.size(); ++i) {
            if (sk.empty())
                sk.push(s[i++]);

            if (i == s.size())
                break;

            if (sk.top() == '(' && s[i] == ')')
                sk.pop();
            else
                sk.push(s[i]);
        }
        return sk.size();
    }

    static int cls_minAddToMakeValid(string s) noexcept {
        int res{};
        int numOpen{};

        for (char c : s) {
            if (c == '(')
                ++numOpen;
            else
                numOpen > 0 ? --numOpen : ++res;
        }
        return numOpen + res;
    }
};

function<char(void)> init = []() -> char {
    std::ios::sync_with_stdio(false);
    std::cin.tie(0);
    std::cout.tie(0);
    return 'c';
};
//
// clang-format off
struct TestCase {
    string s;
    int ans;
    TestCase(string &&s, int ans) : s{s}, ans{ans} {}
    void test() {
        static size_t no{};
        cout << boolalpha;
        cout << AQUC "Testcase "; cout.width(2); cout << right << ++no << RESET << '\n';
        int myAns = Solution::minAddToMakeValid(s);
        cout << "My answer \"" << BLUC << myAns << RESET "\"";
        if (myAns == ans) cout << " is " << GRE("Correct!\n");
        else cout << " is " << RED("Wrong") << ", Correct answer is \"" << ORAC << ans << RESET "\"\n";
    }
};
// clang-format on

int main() {
    // clang-format off
    TestCase eg1("()))((", 4);
    TestCase eg
    TestCase eg3("())(())()(()(())))(()())(((()))))(())(())()(())((()))()()()((()())(((()((())))()(()(()(()((()(())))(()()()))(())(()())((()()(()))(()()(()()()))((())())))(()()(((()()())(()())()(())(()())())((()()(()(((()((()))))()))))())())()(())))((())(()())()()(())()()()))))()(()(()))()()()()((()()((((((((()(()))()()())))()))((())()())(((()())(((((((((()))(()()()(()((((()))((((())))((())()(()((((()()())()())))()))))(())))))((((()))(()))()))(()((()((((((())(()))(())()()(())))()())())()()((()()))((()()(((()())))()()((()())(())((()(()()(())))(()(()(((((((())(())((()(()))))((()(()))(()()()())((((((()()))((())(()))(((((((((((()())()(())(()()))(((()))))()))(())))))(()())))((())(((())(()((())))((())()))()(()(())))))((())()))()(()((()))))()(((()((()((()(())((((((()))))())))()((()())))())()(())())))))((((()(())()(()(())())))((()(()()())(())(()(())()())())((()()()))(()())((())())()()())(()))())((((()()()()(()())())))())(((())(()())(()))))(())((((()))())))))))()()))(((())(()()(()((()()((())((((()()()(())(()(()(", 36);
    TestCase eg
    TestCase eg
    TestCase eg
    TestCase eg
    TestCase eg
    TestCase eg9("(", 1);
    TestCase eg10("())", 1);
    TestCase *eg[] = {&eg1, &eg2, &eg3, &eg4, &eg5, &eg6, &eg7, &eg8, &eg9, &eg10};
    // clang-format on
    for (TestCase *p : eg)
        p->test();
}
